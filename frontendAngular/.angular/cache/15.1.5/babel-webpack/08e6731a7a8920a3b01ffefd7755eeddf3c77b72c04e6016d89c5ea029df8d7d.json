{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/servicios/mensajes.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\n//Clase\nexport class RegistroComponent {\n  /*\r\n    ORDEN DE CARGA DE ELEMENTOS EN UNA CLASE:\r\n      1.) constructor()              --> Espacio donde carga los elementos necesarios\r\n      2.) ngOnChanges()              --> Esta constantemente cargando los cambios\r\n      3.) ngOnInit()                 --> Se encarga de hacerlas peticiones para cargar los elementos en el html\r\n      4.) ngOnCheck()                -->\r\n            -ngAfterContentInit      -->\r\n            -ngAfterContentChecked   -->\r\n            -ngAfterViewInit         --> Después de que se cargue la vista\r\n            -ngAfterViewChecked      -->\r\n      5.) ngOnDestroy                --> Cuando cambia de una vista a otra\r\n  */\n  //Es el tercer elemento que se carga, luego del constructor\n  //y el ngOnChanges\n  ngOnInit() {\n    console.log(\"Cargando el OnInit\");\n  }\n  //--------------------------------------------------------------------\n  //CONSTRUCTOR DE LA CLASE\n  //--------------------------------------------------------------------\n  /*\r\n  El constructor es lo primero que se carga en Angular.\r\n      Definimos una variable msj de tipo MensajeService\r\n  para podeer hacer uso de este servicio, sus variables\r\n  y métodos; msj debe ser público para usar la variable\r\n  en el html, de lo contrario, es mejor manejarla privada\r\n  para uso local (solamente en el TypeScript).\r\n  */\n  constructor(msj) {\n    this.msj = msj;\n    //--------------------------------------------------------------------\n    //VARIABLES DE LA CLASE\n    //--------------------------------------------------------------------\n    this.nombre = \"\";\n    this.email = \"\";\n    this.password = \"\";\n    this.mostrar = true;\n    //VARIABLES DE TIPO OBJETO\n    this.persona1 = {\n      nombre: \"Enmanuel\",\n      apellido: \"Berruecos\",\n      edad: 25,\n      habilidades: [\"programar\", \"Streamer\", 1]\n    };\n    console.log(\"Yo tengo más poder\");\n  }\n  //--------------------------------------------------------------------\n  // FUNCIONES DE LA CLASE RegistroComponent\n  //--------------------------------------------------------------------\n  //Guardar la información\n  Guardar() {\n    //console.log(this.nombre);\n    //this.msj.datos.push({ mensaje: \"push al array\" });\n    //this.msj.miMsj = \"Usuario Guardado!\";\n    //Hacemos uso de la función que almacena el tipo de mensaje\n    this.msj.Cargar(\"success\", \"Usuario Registrado!\", 5000);\n    this.msj.Cargar(\"danger\", \"Usuario no Registrado!\", 6000);\n    //Lo último que se hace (limpiar datos)\n    this.nombre = \"\";\n    this.email = \"\";\n    this.password = \"\";\n  }\n  //Mostrar u Ocultar el registro\n  MostrarOcultar() {\n    this.mostrar = !this.mostrar;\n  }\n}\nRegistroComponent.ɵfac = function RegistroComponent_Factory(t) {\n  return new (t || RegistroComponent)(i0.ɵɵdirectiveInject(i1.MensajesService));\n};\nRegistroComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegistroComponent,\n  selectors: [[\"app-registro\"]],\n  decls: 32,\n  vars: 8,\n  consts: [[\"id\", \"mstr-octr\", \"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"id\", \"registroForm\"], [1, \"form-group\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"placeholder\", \"Juan\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"exampleInputEmail1\"], [\"type\", \"email\", \"id\", \"exampleInputEmail1\", \"aria-describedby\", \"emailHelp\", \"placeholder\", \"Enter email\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"id\", \"emailHelp\", 1, \"form-text\", \"text-muted\"], [\"for\", \"pass\"], [\"type\", \"password\", \"id\", \"pass\", \"placeholder\", \"Enter secret password\", 1, \"form-control\"], [1, \"form-check\"], [\"type\", \"checkbox\", \"id\", \"Check\", 1, \"form-check-input\"], [\"for\", \"Check\", 1, \"form-check-label\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"click\"]],\n  template: function RegistroComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"registro works!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\")(3, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function RegistroComponent_Template_button_click_3_listener() {\n        return ctx.MostrarOcultar();\n      });\n      i0.ɵɵtext(4, \" Mostrar/Ocultar \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 1)(6, \"div\", 2)(7, \"label\", 3);\n      i0.ɵɵtext(8, \"Nombre\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function RegistroComponent_Template_input_ngModelChange_9_listener($event) {\n        return ctx.nombre = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 2)(11, \"label\", 5);\n      i0.ɵɵtext(12, \"Correo elect\\u00F3nico\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function RegistroComponent_Template_input_ngModelChange_13_listener($event) {\n        return ctx.email = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"small\", 7);\n      i0.ɵɵtext(15, \"No comparata informaci\\u00F3n personal con nadie.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 2)(17, \"label\", 8);\n      i0.ɵɵtext(18, \"Contrase\\u00F1a\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 10);\n      i0.ɵɵelement(21, \"input\", 11);\n      i0.ɵɵelementStart(22, \"label\", 12);\n      i0.ɵɵtext(23, \"Check me out\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(24, \"button\", 13);\n      i0.ɵɵlistener(\"click\", function RegistroComponent_Template_button_click_24_listener() {\n        return ctx.Guardar();\n      });\n      i0.ɵɵtext(25, \" Registrar \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(26, \"div\");\n      i0.ɵɵtext(27);\n      i0.ɵɵpipe(28, \"json\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"div\");\n      i0.ɵɵtext(30);\n      i0.ɵɵpipe(31, \"json\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngModel\", ctx.nombre);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.email);\n      i0.ɵɵadvance(14);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(28, 4, ctx.msj));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(31, 6, ctx.msj.datos));\n    }\n  },\n  dependencies: [i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.JsonPipe],\n  styles: [\"#registroForm[_ngcontent-%COMP%] {\\r\\n    width: 400px;\\r\\n    margin: 50px auto;\\r\\n    padding: 20px;\\r\\n    border-radius: 4px;\\r\\n    box-shadow: 0px 10px 34px -13px rgba(0, 0, 0, 0.74);\\r\\n}\\r\\n\\r\\n#mstr-octr[_ngcontent-%COMP%]{\\r\\n    margin-left: 280px;\\r\\n    margin-top: 100px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvTWlzQ29tcG9uZW50ZXMvcmVnaXN0cm8vcmVnaXN0cm8uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7SUFDSSxZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsbURBQW1EO0FBQ3ZEOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGlCQUFpQjtBQUNyQiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4jcmVnaXN0cm9Gb3JtIHtcclxuICAgIHdpZHRoOiA0MDBweDtcclxuICAgIG1hcmdpbjogNTBweCBhdXRvO1xyXG4gICAgcGFkZGluZzogMjBweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIGJveC1zaGFkb3c6IDBweCAxMHB4IDM0cHggLTEzcHggcmdiYSgwLCAwLCAwLCAwLjc0KTtcclxufVxyXG5cclxuI21zdHItb2N0cntcclxuICAgIG1hcmdpbi1sZWZ0OiAyODBweDtcclxuICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;AAUA;AACA,OAAM,MAAOA,iBAAiB;EAE5B;;;;;;;;;;;;EAcA;EACA;EACAC,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;EACnC;EAMA;EACA;EACA;EAEA;;;;;;;;EAUAC,YAAmBC,GAAmB;IAAnB,QAAG,GAAHA,GAAG;IAStB;IACA;IACA;IAEA,WAAM,GAAW,EAAE;IACnB,UAAK,GAAW,EAAE;IAClB,aAAQ,GAAW,EAAE;IACrB,YAAO,GAAY,IAAI;IAEvB;IACA,aAAQ,GAAY;MAClBC,MAAM,EAAE,UAAU;MAClBC,QAAQ,EAAE,WAAW;MACrBC,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE,CAAC,WAAW,EAAE,UAAU,EAAE,CAAC;KACzC;IAvBCP,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;EACnC;EA4BA;EACA;EACA;EAIA;EACAO,OAAO;IACL;IACA;IACA;IAEA;IACA,IAAI,CAACL,GAAG,CAACM,MAAM,CAAC,SAAS,EAAE,qBAAqB,EAAE,IAAI,CAAC;IACvD,IAAI,CAACN,GAAG,CAACM,MAAM,CAAE,QAAQ,EAAE,wBAAwB,EAAE,IAAI,CAAC;IAG1D;IACA,IAAI,CAACL,MAAM,GAAG,EAAE;IAChB,IAAI,CAACM,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,QAAQ,GAAG,EAAE;EACpB;EAGA;EACAC,cAAc;IACZ,IAAI,CAACC,OAAO,GAAG,CAAC,IAAI,CAACA,OAAO;EAC9B;;AAjGWf,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAgB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX9BC,yBAAG;MAAAA,+BAAe;MAAAA,iBAAI;MAEtBA,2BAAK;MAKDA;QAAA,OAASC,oBAAgB;MAAA,EAAC;MAE1BD,iCACF;MAAAA,iBAAS;MAGXA,8BAAuB;MAEDA,sBAAM;MAAAA,iBAAQ;MAChCA,gCAME;MADAA;QAAA;MAAA,EAAoB;MALtBA,iBAME;MAGJA,+BAAwB;MACUA,uCAAiB;MAAAA,iBAAQ;MACzDA,iCAOE;MADAA;QAAA;MAAA,EAAmB;MANrBA,iBAOE;MACFA,iCACG;MAAAA,kEAA4C;MAAAA,iBAC9C;MAGHA,+BAAwB;MACJA,gCAAU;MAAAA,iBAAQ;MACpCA,4BAKE;MACJA,iBAAM;MAENA,gCAAwB;MACtBA,6BAA6D;MAC7DA,kCAA4C;MAAAA,6BAAY;MAAAA,iBAAQ;MAGlEA,mCAAkE;MAApBA;QAAA,OAASC,aAAS;MAAA,EAAC;MAC/DD,4BACF;MAAAA,iBAAS;MAMXA,4BAAK;MAAAA,aAAgB;;MAAAA,iBAAM;MAI3BA,4BAAK;MAAAA,aAAsB;;MAAAA,iBAAM;;;MA9C3BA,eAAoB;MAApBA,oCAAoB;MAYpBA,eAAmB;MAAnBA,mCAAmB;MA8BpBA,gBAAgB;MAAhBA,oDAAgB;MAIhBA,eAAsB;MAAtBA,0DAAsB","names":["RegistroComponent","ngOnInit","console","log","constructor","msj","nombre","apellido","edad","habilidades","Guardar","Cargar","email","password","MostrarOcultar","mostrar","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["E:\\7. Educacion\\BIT con la IBERO\\BOOTCAMP - Desarrollo web full-stack\\Ejercicios\\Angular-1-y-2\\frontendAngular\\src\\app\\MisComponentes\\registro\\registro.component.ts","E:\\7. Educacion\\BIT con la IBERO\\BOOTCAMP - Desarrollo web full-stack\\Ejercicios\\Angular-1-y-2\\frontendAngular\\src\\app\\MisComponentes\\registro\\registro.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';  //Se importa el OnInit\nimport { Persona } from 'src/app/interfaces/persona';\nimport { MensajesService } from 'src/app/servicios/mensajes.service';\n\n@Component({\n  selector: 'app-registro',\n  templateUrl: './registro.component.html',\n  styleUrls: ['./registro.component.css']\n})\n  \n//Clase\nexport class RegistroComponent implements OnInit {\n\n  /*\n    ORDEN DE CARGA DE ELEMENTOS EN UNA CLASE:\n      1.) constructor()              --> Espacio donde carga los elementos necesarios\n      2.) ngOnChanges()              --> Esta constantemente cargando los cambios\n      3.) ngOnInit()                 --> Se encarga de hacerlas peticiones para cargar los elementos en el html\n      4.) ngOnCheck()                --> \n            -ngAfterContentInit      -->\n            -ngAfterContentChecked   -->\n            -ngAfterViewInit         --> Después de que se cargue la vista\n            -ngAfterViewChecked      -->\n      5.) ngOnDestroy                --> Cuando cambia de una vista a otra\n  */\n\n\n  //Es el tercer elemento que se carga, luego del constructor\n  //y el ngOnChanges\n  ngOnInit(): void {\n    console.log(\"Cargando el OnInit\");\n  }\n\n\n  \n\n\n  //--------------------------------------------------------------------\n  //CONSTRUCTOR DE LA CLASE\n  //--------------------------------------------------------------------\n\n  /*\n  El constructor es lo primero que se carga en Angular.\n\n  Definimos una variable msj de tipo MensajeService\n  para podeer hacer uso de este servicio, sus variables\n  y métodos; msj debe ser público para usar la variable\n  en el html, de lo contrario, es mejor manejarla privada\n  para uso local (solamente en el TypeScript).\n  */\n\n  constructor(public msj:MensajesService){ \n    console.log(\"Yo tengo más poder\");\n  }\n\n\n\n\n\n\n  //--------------------------------------------------------------------\n  //VARIABLES DE LA CLASE\n  //--------------------------------------------------------------------\n\n  nombre: string = \"\";\n  email: string = \"\";\n  password: string = \"\";\n  mostrar: boolean = true;\n\n  //VARIABLES DE TIPO OBJETO\n  persona1: Persona = {\n    nombre: \"Enmanuel\",\n    apellido: \"Berruecos\",\n    edad: 25,\n    habilidades: [\"programar\", \"Streamer\", 1],\n  }\n\n\n\n\n\n  //--------------------------------------------------------------------\n  // FUNCIONES DE LA CLASE RegistroComponent\n  //--------------------------------------------------------------------\n\n\n\n  //Guardar la información\n  Guardar() {\n    //console.log(this.nombre);\n    //this.msj.datos.push({ mensaje: \"push al array\" });\n    //this.msj.miMsj = \"Usuario Guardado!\";\n    \n    //Hacemos uso de la función que almacena el tipo de mensaje\n    this.msj.Cargar(\"success\", \"Usuario Registrado!\", 5000);\n    this.msj.Cargar( \"danger\", \"Usuario no Registrado!\", 6000);\n\n\n    //Lo último que se hace (limpiar datos)\n    this.nombre = \"\";\n    this.email = \"\";\n    this.password = \"\";\n  }\n\n\n  //Mostrar u Ocultar el registro\n  MostrarOcultar() {\n    this.mostrar = !this.mostrar;\n  }\n\n}\n","<p>registro works!</p>\n\n<div>\n  <button\n    id=\"mstr-octr\"\n    type=\"submit\"\n    class=\"btn btn-primary\"\n    (click)=\"MostrarOcultar()\"\n  >\n    Mostrar/Ocultar\n  </button>\n</div>\n\n<div id=\"registroForm\">\n  <div class=\"form-group\">\n    <label for=\"name\">Nombre</label>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      id=\"name\"\n      placeholder=\"Juan\"\n      [(ngModel)]=\"nombre\"\n    />\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"exampleInputEmail1\">Correo electónico</label>\n    <input\n      type=\"email\"\n      class=\"form-control\"\n      id=\"exampleInputEmail1\"\n      aria-describedby=\"emailHelp\"\n      placeholder=\"Enter email\"\n      [(ngModel)]=\"email\"\n    />\n    <small id=\"emailHelp\" class=\"form-text text-muted\"\n      >No comparata información personal con nadie.</small\n    >\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"pass\">Contraseña</label>\n    <input\n      type=\"password\"\n      class=\"form-control\"\n      id=\"pass\"\n      placeholder=\"Enter secret password\"\n    />\n  </div>\n\n  <div class=\"form-check\">\n    <input type=\"checkbox\" class=\"form-check-input\" id=\"Check\" />\n    <label class=\"form-check-label\" for=\"Check\">Check me out</label>\n  </div>\n\n  <button type=\"submit\" class=\"btn btn-primary\" (click)=\"Guardar()\">\n    Registrar\n  </button>\n</div>\n\n<!-- de esta forma convertimos una variable en texto para leer en el\n    html (con los \"|\")\n-->\n<div>{{ msj | json }}</div>\n\n<!-- de esta forma se ve solo la informacion que contiene la variable\n-->\n<div>{{ msj.datos | json }}</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}