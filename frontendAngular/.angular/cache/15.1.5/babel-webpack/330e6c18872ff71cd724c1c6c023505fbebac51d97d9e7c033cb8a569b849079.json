{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PeticionService {\n  constructor(http) {\n    this.http = http;\n    this.url_local = \"http://localhost:3000\";\n  }\n  //Petición tipo post\n  Post(url, data) {\n    //Se crea una nueva variable interna de tipo new Promise()\n    let prom = new Promise((resuelve, rechaza) => {\n      this.http.post(url, data) //petición de tipo post\n      //Ejecuta una promesa (funcion que ejecuta unapeticion\n      //hacia el servidor, y no se vuelve a ejecutar hasta que haya\n      //una respuesta)\n      .toPromise()\n      //Cuando llega la información entónces hace algo\n      .then(respuesta => {\n        resuelve(respuesta);\n      });\n    });\n    return prom;\n  } //Fin petición post\n  //Petición tipo get\n  Get(url, data) {\n    //Se crea una nueva variable interna de tipo new Promise()\n    let prom = new Promise((resuelve, rechaza) => {\n      //this.http.get(url)  //peticion de tipo get\n      this.http.get(url) //petición de tipo post\n      //Ejecuta una promesa (funcion que ejecuta unapeticion\n      //hacia el servidor, y no se vuelve a ejecutar hasta que haya\n      //una respuesta)\n      .toPromise()\n      //Cuando llega la información entónces hace algo\n      .then(respuesta => {\n        resuelve(respuesta);\n      });\n    });\n    return prom;\n  } //Fin petición get\n} //Fin de la clase PeticionService\nPeticionService.ɵfac = function PeticionService_Factory(t) {\n  return new (t || PeticionService)(i0.ɵɵinject(i1.HttpClient));\n};\nPeticionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PeticionService,\n  factory: PeticionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,eAAe;EAE1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAEjB,cAAS,GAAW,uBAAuB;EAFT;EAKzC;EACOC,IAAI,CAACC,GAAW,EAAEC,IAAQ;IAE/B;IACA,IAAIC,IAAI,GAAG,IAAIC,OAAO,CAAC,CAACC,QAAQ,EAAEC,OAAO,KAAI;MAE3C,IAAI,CAACP,IAAI,CAACQ,IAAI,CAACN,GAAG,EAAEC,IAAI,CAAC,CAAE;MAEzB;MACA;MACA;MAAA,CACCM,SAAS;MAEV;MAAA,CACCC,IAAI,CACJC,SAAc,IAAI;QACjBL,QAAQ,CAACK,SAAS,CAAC;MACrB,CAAC,CACF;IAEH,CAAC,CAAC;IAEF,OAAOP,IAAI;EAEb,CAAC,CAAC;EAEF;EACOQ,GAAG,CAACV,GAAW,EAAEC,IAAQ;IAE9B;IACA,IAAIC,IAAI,GAAG,IAAIC,OAAO,CAAC,CAACC,QAAQ,EAAEC,OAAO,KAAI;MAE3C;MACA,IAAI,CAACP,IAAI,CAACa,GAAG,CAACX,GAAG,CAAC,CAAE;MAElB;MACA;MACA;MAAA,CACCO,SAAS;MAEV;MAAA,CACCC,IAAI,CACJC,SAAc,IAAI;QACjBL,QAAQ,CAACK,SAAS,CAAC;MACrB,CAAC,CACF;IAEH,CAAC,CAAC;IAEF,OAAOP,IAAI;EAEb,CAAC,CAAC;EAGF;AA7DWN,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAgB,SAAfhB,eAAe;EAAAiB,YAFd;AAAM","names":["PeticionService","constructor","http","Post","url","data","prom","Promise","resuelve","rechaza","post","toPromise","then","respuesta","Get","get","factory","providedIn"],"sourceRoot":"","sources":["E:\\7. Educacion\\BIT con la IBERO\\BOOTCAMP - Desarrollo web full-stack\\Ejercicios\\Angular-1-y-2\\frontendAngular\\src\\app\\servicios\\peticion.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PeticionService {\n\n  constructor(private http: HttpClient ) { }\n\n  public url_local: string = \"http://localhost:3000\";\n\n\n  //Petición tipo post\n  public Post(url: string, data: {}) {\n    \n    //Se crea una nueva variable interna de tipo new Promise()\n    let prom = new Promise((resuelve, rechaza) => {\n\n      this.http.post(url, data)  //petición de tipo post\n        \n        //Ejecuta una promesa (funcion que ejecuta unapeticion\n        //hacia el servidor, y no se vuelve a ejecutar hasta que haya\n        //una respuesta)\n        .toPromise()\n        \n        //Cuando llega la información entónces hace algo\n        .then(\n        (respuesta: any) => {\n          resuelve(respuesta);\n        }\n      )\n    \n    });\n\n    return prom;\n    \n  } //Fin petición post\n\n  //Petición tipo get\n  public Get(url: string, data: {}) {\n    \n    //Se crea una nueva variable interna de tipo new Promise()\n    let prom = new Promise((resuelve, rechaza) => {\n\n      //this.http.get(url)  //peticion de tipo get\n      this.http.get(url)  //petición de tipo post\n        \n        //Ejecuta una promesa (funcion que ejecuta unapeticion\n        //hacia el servidor, y no se vuelve a ejecutar hasta que haya\n        //una respuesta)\n        .toPromise()\n        \n        //Cuando llega la información entónces hace algo\n        .then(\n        (respuesta: any) => {\n          resuelve(respuesta);\n        }\n      )\n    \n    });\n\n    return prom;\n    \n  } //Fin petición get\n\n\n} //Fin de la clase PeticionService\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}